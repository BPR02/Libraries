name: Release Packages

on:
  - workflow_dispatch

env:
  MC_VERSION: '1.19'
  COMMIT_MSG: ${{ github.event.head_commit.message }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:

    #----------------------------------------------
    #            Setup Build Environment
    #----------------------------------------------

    - name: Checkout 'main'
      uses: actions/checkout@v3
      with:
        path: 'libraries'

    - name: Checkout 'releases'
      uses: actions/checkout@v3
      with:
        path: 'releases'
        ref: 'releases'
        fetch-depth: 0

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Cache poetry
      id: cache-poetry
      uses: actions/cache@v3
      with:
        path: ~/.local
        key: poetry-${{ runner.os }}

    - name: Install Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: '1.2.2'
        virtualenvs-in-project: true

    - name: Setup cache
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
            venv-${{ runner.os }}-

    - name: Install dependencies (skip if cached)
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        cd libraries
        poetry install

    #----------------------------------------------
    #       Build packs and copy to branch
    #----------------------------------------------
    
    - id: beet-build
      name: Build via Beet
      run: |
        BROADCAST=()
        for PACK in $(ls smithed_libraries/packs); do
          # Get the pack's version number
          PACK_VERSION=$(cat smithed_libraries/packs/${PACK}/beet.yaml | grep "version:" | cut -d ":" -f 2)
          PACK_VERSION=$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' <<< "$PACK_VERSION")  # strip whitespace

          OLD_PACK_VERSION=$(git show HEAD~1:smithed_libraries/packs/${PACK}/beet.yaml | grep "version:" | cut -d ":" -f 2)
          OLD_PACK_VERSION=$(sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' <<< "$OLD_PACK_VERSION")   # strip whitespace

          # Check if the pack's version number has changed
          if [ "$PACK_VERSION" != $OLD_PACK_VERSION ]; then
            BROADCAST+=("-s broadcast[] = smithed_libraries/packs/$PACK")
          fi
        done

        # Build the packs (if there are any to build)
        if [ -n "$BROADCAST" ]; then
          beet --log INFO -p beet-release.yaml "${BROADCAST[@]}"
        else
          exit 1  # error to kill the rest of the steps
        fi


    - name: Copy files to releases
      run: |
        mkdir -p releases/$MC_VERSION
        cp -rf libraries/dist/* releases/$MC_VERSION

    #----------------------------------------------
    #                 Push to PYPI
    #----------------------------------------------

    - name: Release for PYPI
      id: pypi_release
      if: |
        github.repository == 'SmithedMC/smithed_libraries'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        cd libraries
        poetry run semantic-release publish -v DEBUG -D commit_author="github-actions <action@github.com>"
    
    #----------------------------------------------
    #        Commit built packs to branch
    #----------------------------------------------
    #  We use `&&` to ensure git steps are atomic
    #----------------------------------------------

    - name: Copy files to releases
      run: |
        set -e
        cd releases
        SHORT_HASH=$(git rev-parse --short HEAD)
        VERSION=$(semantic-release print-version)
        git config --global user.name "github-actions"
        git config --global user.email "action@github.com"
        git add .
        git commit -m "ðŸš€ $SHORT_HASH (v$VERSION): $COMMIT_MSG"
        git push --force origin releases
